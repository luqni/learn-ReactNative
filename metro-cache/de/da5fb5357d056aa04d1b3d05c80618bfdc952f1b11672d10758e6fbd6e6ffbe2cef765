{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"expo-constants","data":{"isAsync":false}},{"name":"pretty-format","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/parseErrorStack","data":{"isAsync":false}},{"name":"react-native/Libraries/Core/Devtools/symbolicateStackTrace","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = exports.EXPO_CONSOLE_METHOD_NAME = void 0;\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _expoConstants = _$$_REQUIRE(_dependencyMap[3], \"expo-constants\");\n\n  var _prettyFormat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"pretty-format\"));\n\n  var _parseErrorStack = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"react-native/Libraries/Core/Devtools/parseErrorStack\"));\n\n  var _symbolicateStackTrace = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"react-native/Libraries/Core/Devtools/symbolicateStackTrace\"));\n\n  var EXPO_CONSOLE_METHOD_NAME = '__expoConsoleLog';\n  exports.EXPO_CONSOLE_METHOD_NAME = EXPO_CONSOLE_METHOD_NAME;\n\n  function serializeLogDataAsync(data, level) {\n    var serializedValues, includesStack, rawStack, syntheticError, stack, errorMessage, serializedError, error, _errorMessage, _serializedError;\n\n    return _regenerator.default.async(function serializeLogDataAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            includesStack = false;\n\n            if (!_stackTraceLogsSupported()) {\n              _context.next = 32;\n              break;\n            }\n\n            if (!_isUnhandledPromiseRejection(data, level)) {\n              _context.next = 11;\n              break;\n            }\n\n            rawStack = data[0];\n            syntheticError = {\n              stack: rawStack\n            };\n            _context.next = 7;\n            return _regenerator.default.awrap(_symbolicateErrorAsync(syntheticError));\n\n          case 7:\n            stack = _context.sent;\n\n            if (!stack.length) {\n              serializedValues = _stringifyLogData(data);\n            } else {\n              errorMessage = rawStack.split('\\n')[1];\n              serializedValues = [{\n                message: \"[Unhandled promise rejection: \" + errorMessage + \"]\",\n                stack: _formatStack(stack)\n              }];\n              includesStack = true;\n            }\n\n            _context.next = 30;\n            break;\n\n          case 11:\n            if (!(data.length === 1 && data[0] instanceof Error)) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 14;\n            return _regenerator.default.awrap(_serializeErrorAsync(data[0]));\n\n          case 14:\n            serializedError = _context.sent;\n            serializedValues = [serializedError];\n            includesStack = serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 19:\n            if (!(level === 'warn' || level === 'error')) {\n              _context.next = 29;\n              break;\n            }\n\n            error = _captureConsoleStackTrace();\n            _errorMessage = _stringifyLogData(data).join(', ');\n            _context.next = 24;\n            return _regenerator.default.awrap(_serializeErrorAsync(error, _errorMessage));\n\n          case 24:\n            _serializedError = _context.sent;\n            serializedValues = [_serializedError];\n            includesStack = _serializedError.hasOwnProperty('stack');\n            _context.next = 30;\n            break;\n\n          case 29:\n            serializedValues = _stringifyLogData(data);\n\n          case 30:\n            _context.next = 33;\n            break;\n\n          case 32:\n            serializedValues = _stringifyLogData(data);\n\n          case 33:\n            return _context.abrupt(\"return\", {\n              body: (0, _toConsumableArray2.default)(serializedValues),\n              includesStack: includesStack\n            });\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _stringifyLogData(data) {\n    return data.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        return (0, _prettyFormat.default)(item);\n      }\n    });\n  }\n\n  function _serializeErrorAsync(error, message) {\n    var stack, formattedStack;\n    return _regenerator.default.async(function _serializeErrorAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (message == null) {\n              message = error.message;\n            }\n\n            if (!(!error.stack || !error.stack.length)) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _prettyFormat.default)(error));\n\n          case 3:\n            _context2.next = 5;\n            return _regenerator.default.awrap(_symbolicateErrorAsync(error));\n\n          case 5:\n            stack = _context2.sent;\n            formattedStack = _formatStack(stack);\n            return _context2.abrupt(\"return\", {\n              message: message,\n              stack: formattedStack\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this);\n  }\n\n  function _symbolicateErrorAsync(error) {\n    var parsedStack, symbolicatedStack;\n    return _regenerator.default.async(function _symbolicateErrorAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            parsedStack = (0, _parseErrorStack.default)(error);\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regenerator.default.awrap((0, _symbolicateStackTrace.default)(parsedStack));\n\n          case 4:\n            symbolicatedStack = _context3.sent;\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](1);\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 10:\n            if (symbolicatedStack) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", parsedStack);\n\n          case 12:\n            return _context3.abrupt(\"return\", symbolicatedStack.map(_removeProjectRoot));\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, this, [[1, 7]]);\n  }\n\n  function _formatStack(stack) {\n    return stack.map(function (frame) {\n      var line = frame.file + \":\" + frame.lineNumber;\n\n      if (frame.column != null) {\n        line += \":\" + frame.column;\n      }\n\n      line += \" in \" + frame.methodName;\n      return line;\n    }).join('\\n');\n  }\n\n  function _removeProjectRoot(frame) {\n    var filename = frame.file;\n\n    if (filename == null) {\n      return frame;\n    }\n\n    var projectRoot = _getProjectRoot();\n\n    if (projectRoot == null) {\n      return frame;\n    }\n\n    if (filename.startsWith(projectRoot)) {\n      filename = filename.substring(projectRoot.length);\n\n      if (filename[0] === '/' || filename[0] === '\\\\') {\n        filename = filename.substring(1);\n      }\n\n      frame.file = filename;\n    }\n\n    return frame;\n  }\n\n  function _stackTraceLogsSupported() {\n    return !!(__DEV__ && _getProjectRoot());\n  }\n\n  function _isUnhandledPromiseRejection(data, level) {\n    return level === 'warn' && typeof data[0] === 'string' && /^Possible Unhandled Promise Rejection/.test(data[0]);\n  }\n\n  function _captureConsoleStackTrace() {\n    try {\n      throw new Error();\n    } catch (error) {\n      var stackLines = error.stack.split('\\n');\n      var consoleMethodIndex = stackLines.findIndex(function (frame) {\n        return frame.includes(EXPO_CONSOLE_METHOD_NAME);\n      });\n\n      if (consoleMethodIndex !== -1) {\n        stackLines = stackLines.slice(consoleMethodIndex + 1);\n        error.stack = stackLines.join('\\n');\n      }\n\n      return error;\n    }\n  }\n\n  function _getProjectRoot() {\n    return _expoConstants.Constants.manifest && _expoConstants.Constants.manifest.developer ? _expoConstants.Constants.manifest.developer.projectRoot : null;\n  }\n\n  var _default = {\n    serializeLogDataAsync: serializeLogDataAsync\n  };\n  exports.default = _default;\n});","map":[[13,0,1,0],[15,0,2,0],[17,0,3,0],[19,0,4,0],[21,0,5,7],[21,6,5,13,"EXPO_CONSOLE_METHOD_NAME"],[21,30,5,37],[21,33,5,40],[21,51,5,7],[24,0,6,0],[24,11,6,15,"serializeLogDataAsync"],[24,32,6,0],[24,33,6,37,"data"],[24,37,6,0],[24,39,6,43,"level"],[24,44,6,0],[25,0,6,0],[27,0,6,0],[28,0,6,0],[29,0,6,0],[30,0,6,0],[31,0,8,8,"includesStack"],[31,12,8,8,"includesStack"],[31,25,6,0],[31,28,8,24],[31,33,6,0],[33,0,6,0],[33,17,9,8,"_stackTraceLogsSupported"],[33,41,9,32],[33,43,6,0],[34,0,6,0],[35,0,6,0],[36,0,6,0],[38,0,6,0],[38,17,10,12,"_isUnhandledPromiseRejection"],[38,45,10,40],[38,46,10,41,"data"],[38,50,10,40],[38,52,10,47,"level"],[38,57,10,40],[38,58,6,0],[39,0,6,0],[40,0,6,0],[41,0,6,0],[43,0,11,16,"rawStack"],[43,12,11,16,"rawStack"],[43,20,6,0],[43,23,11,27,"data"],[43,27,11,31],[43,28,11,32],[43,29,11,31],[43,30,6,0],[44,0,12,16,"syntheticError"],[44,12,12,16,"syntheticError"],[44,26,6,0],[44,29,12,33],[45,0,12,35,"stack"],[45,14,12,35,"stack"],[45,19,12,40],[45,21,12,42,"rawStack"],[46,0,12,33],[46,13,6,0],[47,0,6,0],[48,0,6,0],[48,46,13,30,"_symbolicateErrorAsync"],[48,68,13,52],[48,69,13,53,"syntheticError"],[48,83,13,52],[48,84,6,0],[50,0,6,0],[51,0,13,16,"stack"],[51,12,13,16,"stack"],[51,17,6,0],[53,0,14,12],[53,16,14,16],[53,17,14,17,"stack"],[53,22,14,22],[53,23,14,23,"length"],[53,29,14,12],[53,31,14,31],[54,0,15,16,"serializedValues"],[54,14,15,16,"serializedValues"],[54,30,15,32],[54,33,15,35,"_stringifyLogData"],[54,50,15,52],[54,51,15,53,"data"],[54,55,15,52],[54,56,15,16],[55,0,16,13],[55,13,14,12],[55,19,17,17],[56,0,19,20,"errorMessage"],[56,14,19,20,"errorMessage"],[56,26,17,17],[56,29,19,35,"rawStack"],[56,37,19,43],[56,38,19,44,"split"],[56,43,19,35],[56,44,19,50],[56,48,19,35],[56,50,19,56],[56,51,19,35],[56,52,17,17],[57,0,20,16,"serializedValues"],[57,14,20,16,"serializedValues"],[57,30,20,32],[57,33,20,35],[57,34,21,20],[58,0,22,24,"message"],[58,16,22,24,"message"],[58,23,22,31],[58,60,22,66,"errorMessage"],[58,72,22,31],[58,78,21,20],[59,0,23,24,"stack"],[59,16,23,24,"stack"],[59,21,23,29],[59,23,23,31,"_formatStack"],[59,35,23,43],[59,36,23,44,"stack"],[59,41,23,43],[60,0,21,20],[60,15,20,35],[60,16,20,16],[61,0,26,16,"includesStack"],[61,14,26,16,"includesStack"],[61,27,26,29],[61,30,26,32],[61,34,26,16],[62,0,27,13],[64,0,6,0],[65,0,6,0],[67,0,6,0],[68,0,6,0],[68,18,29,17,"data"],[68,22,29,21],[68,23,29,22,"length"],[68,29,29,17],[68,34,29,33],[68,35,29,17],[68,39,29,38,"data"],[68,43,29,42],[68,44,29,43],[68,45,29,42],[68,46,29,38],[68,58,29,57,"Error"],[68,63,6,0],[69,0,6,0],[70,0,6,0],[71,0,6,0],[73,0,6,0],[74,0,6,0],[74,46,33,40,"_serializeErrorAsync"],[74,66,33,60],[74,67,33,61,"data"],[74,71,33,65],[74,72,33,66],[74,73,33,65],[74,74,33,60],[74,75,6,0],[76,0,6,0],[77,0,33,16,"serializedError"],[77,12,33,16,"serializedError"],[77,27,6,0],[78,0,34,12,"serializedValues"],[78,12,34,12,"serializedValues"],[78,28,34,28],[78,31,34,31],[78,32,34,32,"serializedError"],[78,47,34,31],[78,48,34,12],[79,0,35,12,"includesStack"],[79,12,35,12,"includesStack"],[79,25,35,25],[79,28,35,28,"serializedError"],[79,43,35,43],[79,44,35,44,"hasOwnProperty"],[79,58,35,28],[79,59,35,59],[79,66,35,28],[79,67,35,12],[80,0,6,0],[81,0,6,0],[83,0,6,0],[84,0,6,0],[84,18,37,17,"level"],[84,23,37,22],[84,28,37,27],[84,34,37,17],[84,38,37,37,"level"],[84,43,37,42],[84,48,37,47],[84,55,6,0],[85,0,6,0],[86,0,6,0],[87,0,6,0],[89,0,40,16,"error"],[89,12,40,16,"error"],[89,17,6,0],[89,20,40,24,"_captureConsoleStackTrace"],[89,45,40,49],[89,47,6,0],[90,0,42,16,"errorMessage"],[90,12,42,16,"errorMessage"],[90,25,6,0],[90,28,42,31,"_stringifyLogData"],[90,45,42,48],[90,46,42,49,"data"],[90,50,42,48],[90,51,42,31],[90,52,42,55,"join"],[90,56,42,31],[90,57,42,60],[90,61,42,31],[90,62,6,0],[91,0,6,0],[92,0,6,0],[92,46,43,40,"_serializeErrorAsync"],[92,66,43,60],[92,67,43,61,"error"],[92,72,43,60],[92,74,43,68,"errorMessage"],[92,87,43,60],[92,88,6,0],[94,0,6,0],[95,0,43,16,"serializedError"],[95,12,43,16,"serializedError"],[95,28,6,0],[96,0,44,12,"serializedValues"],[96,12,44,12,"serializedValues"],[96,28,44,28],[96,31,44,31],[96,32,44,32,"serializedError"],[96,48,44,31],[96,49,44,12],[97,0,45,12,"includesStack"],[97,12,45,12,"includesStack"],[97,25,45,25],[97,28,45,28,"serializedError"],[97,44,45,43],[97,45,45,44,"hasOwnProperty"],[97,59,45,28],[97,60,45,59],[97,67,45,28],[97,68,45,12],[98,0,6,0],[99,0,6,0],[101,0,6,0],[102,0,48,12,"serializedValues"],[102,12,48,12,"serializedValues"],[102,28,48,28],[102,31,48,31,"_stringifyLogData"],[102,48,48,48],[102,49,48,49,"data"],[102,53,48,48],[102,54,48,12],[104,0,6,0],[105,0,6,0],[106,0,6,0],[108,0,6,0],[109,0,52,8,"serializedValues"],[109,12,52,8,"serializedValues"],[109,28,52,24],[109,31,52,27,"_stringifyLogData"],[109,48,52,44],[109,49,52,45,"data"],[109,53,52,44],[109,54,52,8],[111,0,6,0],[112,0,6,0],[112,45,54,11],[113,0,55,8,"body"],[113,14,55,8,"body"],[113,18,55,12],[113,53,55,18,"serializedValues"],[113,69,55,12],[113,70,54,11],[114,0,56,8,"includesStack"],[114,14,56,8,"includesStack"],[114,27,56,21],[114,29,56,8,"includesStack"],[115,0,54,11],[115,13,6,0],[117,0,6,0],[118,0,6,0],[119,0,6,0],[120,0,6,0],[121,0,6,0],[122,0,6,0],[123,0,6,0],[125,0,59,0],[125,11,59,9,"_stringifyLogData"],[125,28,59,0],[125,29,59,27,"data"],[125,33,59,0],[125,35,59,33],[126,0,60,4],[126,11,60,11,"data"],[126,15,60,15],[126,16,60,16,"map"],[126,19,60,11],[126,20,60,20],[126,30,60,20,"item"],[126,34,60,24],[126,36,60,28],[127,0,61,8],[127,10,61,12],[127,17,61,19,"item"],[127,21,61,12],[127,26,61,28],[127,34,61,8],[127,36,61,38],[128,0,62,12],[128,15,62,19,"item"],[128,19,62,12],[129,0,63,9],[129,7,61,8],[129,13,64,13],[130,0,65,12],[130,15,65,19],[130,42,65,32,"item"],[130,46,65,19],[130,47,65,12],[131,0,66,9],[132,0,67,5],[132,5,60,11],[132,6,60,4],[133,0,68,1],[135,0,69,0],[135,11,69,15,"_serializeErrorAsync"],[135,31,69,0],[135,32,69,36,"error"],[135,37,69,0],[135,39,69,43,"message"],[135,46,69,0],[136,0,69,0],[137,0,69,0],[138,0,69,0],[139,0,69,0],[140,0,69,0],[141,0,70,4],[141,16,70,8,"message"],[141,23,70,15],[141,27,70,19],[141,31,70,4],[141,33,70,25],[142,0,71,8,"message"],[142,14,71,8,"message"],[142,21,71,15],[142,24,71,18,"error"],[142,29,71,23],[142,30,71,24,"message"],[142,37,71,8],[143,0,72,5],[145,0,69,0],[145,18,73,8],[145,19,73,9,"error"],[145,24,73,14],[145,25,73,15,"stack"],[145,30,73,8],[145,34,73,24],[145,35,73,25,"error"],[145,40,73,30],[145,41,73,31,"stack"],[145,46,73,25],[145,47,73,37,"length"],[145,53,69,0],[146,0,69,0],[147,0,69,0],[148,0,69,0],[150,0,69,0],[150,46,74,15],[150,73,74,28,"error"],[150,78,74,15],[150,79,69,0],[152,0,69,0],[153,0,69,0],[154,0,69,0],[154,46,76,22,"_symbolicateErrorAsync"],[154,68,76,44],[154,69,76,45,"error"],[154,74,76,44],[154,75,69,0],[156,0,69,0],[157,0,76,8,"stack"],[157,12,76,8,"stack"],[157,17,69,0],[158,0,77,8,"formattedStack"],[158,12,77,8,"formattedStack"],[158,26,69,0],[158,29,77,25,"_formatStack"],[158,41,77,37],[158,42,77,38,"stack"],[158,47,77,37],[158,48,69,0],[159,0,69,0],[159,46,78,11],[160,0,78,13,"message"],[160,14,78,13,"message"],[160,21,78,20],[160,23,78,13,"message"],[160,30,78,11],[161,0,78,22,"stack"],[161,14,78,22,"stack"],[161,19,78,27],[161,21,78,29,"formattedStack"],[162,0,78,11],[162,13,69,0],[164,0,69,0],[165,0,69,0],[166,0,69,0],[167,0,69,0],[168,0,69,0],[169,0,69,0],[170,0,69,0],[172,0,80,0],[172,11,80,15,"_symbolicateErrorAsync"],[172,33,80,0],[172,34,80,38,"error"],[172,39,80,0],[173,0,80,0],[174,0,80,0],[175,0,80,0],[176,0,80,0],[177,0,80,0],[178,0,81,8,"parsedStack"],[178,12,81,8,"parsedStack"],[178,23,80,0],[178,26,81,22],[178,56,81,38,"error"],[178,61,81,22],[178,62,80,0],[179,0,80,0],[180,0,80,0],[181,0,80,0],[181,46,84,34],[181,82,84,56,"parsedStack"],[181,93,84,34],[181,94,80,0],[183,0,80,0],[184,0,84,8,"symbolicatedStack"],[184,12,84,8,"symbolicatedStack"],[184,29,80,0],[185,0,80,0],[186,0,80,0],[188,0,80,0],[189,0,80,0],[190,0,80,0],[191,0,80,0],[191,46,87,15,"parsedStack"],[191,57,80,0],[193,0,80,0],[194,0,80,0],[194,16,90,9,"symbolicatedStack"],[194,33,80,0],[195,0,80,0],[196,0,80,0],[197,0,80,0],[199,0,80,0],[199,46,91,15,"parsedStack"],[199,57,80,0],[201,0,80,0],[202,0,80,0],[202,46,94,11,"symbolicatedStack"],[202,63,94,28],[202,64,94,29,"map"],[202,67,94,11],[202,68,94,33,"_removeProjectRoot"],[202,86,94,11],[202,87,80,0],[204,0,80,0],[205,0,80,0],[206,0,80,0],[207,0,80,0],[208,0,80,0],[209,0,80,0],[210,0,80,0],[212,0,96,0],[212,11,96,9,"_formatStack"],[212,23,96,0],[212,24,96,22,"stack"],[212,29,96,0],[212,31,96,29],[213,0,97,4],[213,11,97,11,"stack"],[213,16,97,16],[213,17,98,9,"map"],[213,20,97,11],[213,21,98,13],[213,31,98,13,"frame"],[213,36,98,18],[213,38,98,22],[214,0,99,8],[214,10,99,12,"line"],[214,14,99,16],[214,17,99,22,"frame"],[214,22,99,27],[214,23,99,28,"file"],[214,27,99,16],[214,36,99,36,"frame"],[214,41,99,41],[214,42,99,42,"lineNumber"],[214,52,99,8],[216,0,100,8],[216,10,100,12,"frame"],[216,15,100,17],[216,16,100,18,"column"],[216,22,100,12],[216,26,100,28],[216,30,100,8],[216,32,100,34],[217,0,101,12,"line"],[217,8,101,12,"line"],[217,12,101,16],[217,22,101,24,"frame"],[217,27,101,29],[217,28,101,30,"column"],[217,34,101,12],[218,0,102,9],[220,0,103,8,"line"],[220,6,103,8,"line"],[220,10,103,12],[220,23,103,23,"frame"],[220,28,103,28],[220,29,103,29,"methodName"],[220,39,103,8],[221,0,104,8],[221,13,104,15,"line"],[221,17,104,8],[222,0,105,5],[222,5,97,11],[222,7,106,9,"join"],[222,11,97,11],[222,12,106,14],[222,16,97,11],[222,17,97,4],[223,0,107,1],[225,0,108,0],[225,11,108,9,"_removeProjectRoot"],[225,29,108,0],[225,30,108,28,"frame"],[225,35,108,0],[225,37,108,35],[226,0,109,4],[226,8,109,8,"filename"],[226,16,109,16],[226,19,109,19,"frame"],[226,24,109,24],[226,25,109,25,"file"],[226,29,109,4],[228,0,110,4],[228,8,110,8,"filename"],[228,16,110,16],[228,20,110,20],[228,24,110,4],[228,26,110,26],[229,0,111,8],[229,13,111,15,"frame"],[229,18,111,8],[230,0,112,5],[232,0,113,4],[232,8,113,8,"projectRoot"],[232,19,113,19],[232,22,113,22,"_getProjectRoot"],[232,37,113,37],[232,39,113,4],[234,0,114,4],[234,8,114,8,"projectRoot"],[234,19,114,19],[234,23,114,23],[234,27,114,4],[234,29,114,29],[235,0,115,8],[235,13,115,15,"frame"],[235,18,115,8],[236,0,116,5],[238,0,117,4],[238,8,117,8,"filename"],[238,16,117,16],[238,17,117,17,"startsWith"],[238,27,117,8],[238,28,117,28,"projectRoot"],[238,39,117,8],[238,40,117,4],[238,42,117,42],[239,0,118,8,"filename"],[239,6,118,8,"filename"],[239,14,118,16],[239,17,118,19,"filename"],[239,25,118,27],[239,26,118,28,"substring"],[239,35,118,19],[239,36,118,38,"projectRoot"],[239,47,118,49],[239,48,118,50,"length"],[239,54,118,19],[239,55,118,8],[241,0,119,8],[241,10,119,12,"filename"],[241,18,119,20],[241,19,119,21],[241,20,119,20],[241,21,119,12],[241,26,119,28],[241,29,119,12],[241,33,119,35,"filename"],[241,41,119,43],[241,42,119,44],[241,43,119,43],[241,44,119,35],[241,49,119,51],[241,53,119,8],[241,55,119,57],[242,0,120,12,"filename"],[242,8,120,12,"filename"],[242,16,120,20],[242,19,120,23,"filename"],[242,27,120,31],[242,28,120,32,"substring"],[242,37,120,23],[242,38,120,42],[242,39,120,23],[242,40,120,12],[243,0,121,9],[245,0,122,8,"frame"],[245,6,122,8,"frame"],[245,11,122,13],[245,12,122,14,"file"],[245,16,122,8],[245,19,122,21,"filename"],[245,27,122,8],[246,0,123,5],[248,0,124,4],[248,11,124,11,"frame"],[248,16,124,4],[249,0,125,1],[251,0,135,0],[251,11,135,9,"_stackTraceLogsSupported"],[251,35,135,0],[251,38,135,36],[252,0,136,4],[252,11,136,11],[252,12,136,12],[252,14,136,14,"__DEV__"],[252,21,136,21],[252,25,136,25,"_getProjectRoot"],[252,40,136,40],[252,42,136,12],[252,43,136,4],[253,0,137,1],[255,0,138,0],[255,11,138,9,"_isUnhandledPromiseRejection"],[255,39,138,0],[255,40,138,38,"data"],[255,44,138,0],[255,46,138,44,"level"],[255,51,138,0],[255,53,138,51],[256,0,139,4],[256,11,139,12,"level"],[256,16,139,17],[256,21,139,22],[256,27,139,12],[256,31,140,8],[256,38,140,15,"data"],[256,42,140,19],[256,43,140,20],[256,44,140,19],[256,45,140,8],[256,50,140,27],[256,58,139,12],[256,62,141,8],[256,102,141,48,"test"],[256,106,141,8],[256,107,141,53,"data"],[256,111,141,57],[256,112,141,58],[256,113,141,57],[256,114,141,8],[256,115,139,4],[257,0,142,1],[259,0,143,0],[259,11,143,9,"_captureConsoleStackTrace"],[259,36,143,0],[259,39,143,37],[260,0,144,4],[260,8,144,8],[261,0,145,8],[261,12,145,14],[261,16,145,18,"Error"],[261,21,145,14],[261,23,145,8],[262,0,146,5],[262,5,144,4],[262,6,147,4],[262,13,147,11,"error"],[262,18,147,4],[262,20,147,18],[263,0,148,8],[263,10,148,12,"stackLines"],[263,20,148,22],[263,23,148,25,"error"],[263,28,148,30],[263,29,148,31,"stack"],[263,34,148,25],[263,35,148,37,"split"],[263,40,148,25],[263,41,148,43],[263,45,148,25],[263,46,148,8],[264,0,149,8],[264,10,149,12,"consoleMethodIndex"],[264,28,149,30],[264,31,149,33,"stackLines"],[264,41,149,43],[264,42,149,44,"findIndex"],[264,51,149,33],[264,52,149,54],[264,62,149,54,"frame"],[264,67,149,59],[265,0,149,59],[265,15,149,63,"frame"],[265,20,149,68],[265,21,149,69,"includes"],[265,29,149,63],[265,30,149,78,"EXPO_CONSOLE_METHOD_NAME"],[265,54,149,63],[265,55,149,59],[266,0,149,59],[266,7,149,33],[266,8,149,8],[268,0,150,8],[268,10,150,12,"consoleMethodIndex"],[268,28,150,30],[268,33,150,35],[268,34,150,36],[268,35,150,8],[268,37,150,39],[269,0,151,12,"stackLines"],[269,8,151,12,"stackLines"],[269,18,151,22],[269,21,151,25,"stackLines"],[269,31,151,35],[269,32,151,36,"slice"],[269,37,151,25],[269,38,151,42,"consoleMethodIndex"],[269,56,151,60],[269,59,151,63],[269,60,151,25],[269,61,151,12],[270,0,152,12,"error"],[270,8,152,12,"error"],[270,13,152,17],[270,14,152,18,"stack"],[270,19,152,12],[270,22,152,26,"stackLines"],[270,32,152,36],[270,33,152,37,"join"],[270,37,152,26],[270,38,152,42],[270,42,152,26],[270,43,152,12],[271,0,153,9],[273,0,154,8],[273,13,154,15,"error"],[273,18,154,8],[274,0,155,5],[275,0,156,1],[277,0,157,0],[277,11,157,9,"_getProjectRoot"],[277,26,157,0],[277,29,157,27],[278,0,158,4],[278,11,158,11,"Constants"],[278,36,158,21,"manifest"],[278,44,158,11],[278,48,158,33,"Constants"],[278,73,158,43,"manifest"],[278,81,158,33],[278,82,158,52,"developer"],[278,91,158,11],[278,94,159,10,"Constants"],[278,119,159,20,"manifest"],[278,127,159,10],[278,128,159,29,"developer"],[278,137,159,10],[278,138,159,39,"projectRoot"],[278,149,158,11],[278,152,160,10],[278,156,158,4],[279,0,161,1],[281,17,162,15],[282,0,163,4,"serializeLogDataAsync"],[282,4,163,4,"serializeLogDataAsync"],[282,25,163,25],[282,27,163,4,"serializeLogDataAsync"],[283,0,162,15],[283,3]]},"type":"js/module"}]}